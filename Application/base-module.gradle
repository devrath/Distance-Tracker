apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlinx-serialization'

// CODE-QUALITY:-> Spotless
apply from: rootProject.file('buildSrc/scripts/spotless.gradle')


android {
    compileSdk ProjectConfig.compileSdk

    defaultConfig {
        minSdk ProjectConfig.minSdk
        targetSdk ProjectConfig.targetSdk
        versionCode ProjectConfig.versionCode
        versionName ProjectConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions { jvmTarget = ProjectConfig.jvmTarget }
    buildFeatures { viewBinding = true }
    buildFeatures { compose = true }
    composeOptions { kotlinCompilerExtensionVersion = Compose.composeVersion }
    packagingOptions {
        resources.excludes.add("META-INF/AL2.0")
        resources.excludes.add("META-INF/LGPL2.1")
        resources.excludes.add("**/attach_hotspot_windows.dll")
        resources.excludes.add("META-INF/licenses/ASM")
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // ********************************** Compose ************************************
    implementation(Compose.compiler)
    implementation(Compose.ui)
    implementation(Compose.uiToolingPreview)
    implementation(Compose.hiltNavigationCompose)
    implementation(Compose.material)
    implementation(Compose.runtime)
    implementation(Compose.navigation)
    implementation(Compose.viewModelCompose)
    implementation(Compose.activityCompose)
    implementation(Compose.uiToolingPreview)
    debugImplementation(Compose.uiTooling)
    // ********************************** Compose ************************************

    implementation(Coroutines.coroutinePlayServicesLib)

    implementation(LifeCycle.lifecycleExtensions)
    implementation(LifeCycle.lifecycleLiveData)
    implementation(LifeCycle.lifecycleRuntimeKtx)
    implementation(Google.material)

    implementation(Google.material)

    kapt DaggerHilt.hiltCompiler
    implementation DaggerHilt.hiltAndroid

    //implementation Moshi.moshiRepo
    implementation Gson.gson
    //kapt Moshi.moshiCodegen

    implementation platform(Firebase.googleFirebase)
    implementation Firebase.firebaseAnalyticsKtx

    implementation Coroutines.coroutineLib
    implementation AndroidX.coreKtx
    implementation Coroutines.coroutineAndroidLib


    testImplementation Testing.junit4
    testImplementation Testing.junitAndroidExt
    testImplementation Testing.truth
    testImplementation Testing.coroutines
    testImplementation Testing.turbine
    testImplementation Testing.composeUiTest
    testImplementation Testing.mockk
    testImplementation Testing.mockWebServer
    testImplementation Testing.unitCoreTesting
    testImplementation Testing.unitRoomTesting
    testImplementation Testing.unitCore
    testImplementation Testing.unitMockitoKotlin
    testImplementation Testing.mockitoInline
    testImplementation Testing.mockitoCore
    testImplementation Testing.orgJson
    testImplementation Testing.roboElectric

    testImplementation Testing.junit4
    testImplementation Testing.junitAndroidExt
    testImplementation Testing.truth
    testImplementation Testing.coroutines
    testImplementation Testing.turbine
    testImplementation Testing.composeUiTest
    testImplementation Testing.mockk
    testImplementation Testing.mockWebServer
    testImplementation Testing.hiltTesting

    kaptAndroidTest DaggerHilt.hiltCompiler
    testImplementation Testing.testRunner
}